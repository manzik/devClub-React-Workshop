{"version":3,"sources":["NotesList.js","NoteRenderer.js","usePersistentState.js","App.js","index.js"],"names":["NotesList","notes","addNote","selectActiveNoteById","activeNoteId","deleteNoteById","className","map","note","key","id","onClick","style","color","name","noteId","Date","now","noteName","prompt","hljs","registerLanguage","javascript","marked","setOptions","highlight","code","language","require","languageSelection","getLanguage","value","NoteRenderer","activeNote","setActiveNoteText","mdTextAreaRef","React","useRef","onChange","current","ref","text","spellCheck","ReactHtmlParser","usePersistentState","initialValue","initialState","JSON","parse","localStorage","getItem","useState","state","internalSetState","useEffect","setItem","stringify","newState","initialNotes","App","usePersistantState","setNotes","setActiveNoteId","filter","newText","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.218c6ef1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// Render notes, and give user the option to add a note\r\nfunction NotesList({ notes, addNote, selectActiveNoteById, activeNoteId, deleteNoteById }) \r\n{\r\n\r\n    let onAddNewNote = () => \r\n    {\r\n        let noteId = Date.now();\r\n        let noteName = prompt(\"Please enter a name for your new note.\");\r\n        let noteText = \"## New note\";\r\n        \r\n        if(noteName)\r\n            addNote(noteId, noteName, noteText);\r\n    };\r\n\r\n    return <div className=\"notes-list\">\r\n        <div className=\"note-item header-item\">Notes</div>\r\n        <hr/>\r\n        {\r\n            notes.map((note) => \r\n            {\r\n                return <div \r\n                    className=\"note-item\" key={note.id}\r\n                    onClick={() => selectActiveNoteById(note.id)}\r\n                >\r\n                    <span className=\"note-name\">\r\n                        {note.id == activeNoteId ? <span style={{ color: \"#2EA7FF\" }}>&gt; </span> : \"\"}\r\n                        {note.name}\r\n                    </span>\r\n                    <span className=\"note-delete\" onClick={() => deleteNoteById(note.id)}>x</span>\r\n                </div>;\r\n            })\r\n        }\r\n        <div className=\"note-item add-note\" onClick={onAddNewNote}> + </div>\r\n    </div>;\r\n}\r\n\r\nexport default NotesList;","import React from \"react\";\r\n\r\nimport marked from \"marked\";\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nimport hljs from 'highlight.js';\r\nimport javascript from 'highlight.js/lib/languages/javascript';\r\nimport 'highlight.js/styles/github.css';\r\nhljs.registerLanguage('javascript', javascript);\r\n\r\nmarked.setOptions({\r\n    highlight: function(code, language) {\r\n        const hljs = require('highlight.js');\r\n        const languageSelection = hljs.getLanguage(language) ? language : 'plaintext';\r\n        return hljs.highlight(languageSelection, code).value;\r\n      },\r\n});\r\n\r\nfunction NoteRenderer({ activeNote, setActiveNoteText }) \r\n{\r\n    let mdTextAreaRef = React.useRef();\r\n\r\n    return <>\r\n        <div className=\"note-raw-md\">\r\n            <textarea\r\n                onChange={() => setActiveNoteText(mdTextAreaRef.current.value)}\r\n                ref={mdTextAreaRef}\r\n                value={activeNote.text}\r\n                spellCheck={false}\r\n            ></textarea>\r\n        </div>\r\n        <div className=\"note-rendered-md\">\r\n            { ReactHtmlParser(marked(activeNote.text)) }\r\n        </div>\r\n    </>;\r\n}\r\n\r\nexport default NoteRenderer;","import React from \"react\";\r\n\r\nfunction usePersistentState(key, initialValue)\r\n{\r\n    let initialState = JSON.parse(localStorage.getItem(key));\r\n    let [state, internalSetState] = React.useState(initialState || initialValue);\r\n\r\n    React.useEffect(() => \r\n    {\r\n        let localStorageValue = localStorage.getItem(key);\r\n        let hasLocalStorageValue = localStorageValue !== null;\r\n        if(!hasLocalStorageValue)\r\n            localStorage.setItem(key, JSON.stringify(initialValue));\r\n    }, []);\r\n\r\n    let externalSetState = (newState) => {\r\n        localStorage.setItem(key, JSON.stringify(newState));\r\n        internalSetState(newState);\r\n    };\r\n\r\n    return [state, externalSetState];\r\n}\r\n\r\nexport default usePersistentState;","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport fs from \"fs\"\r\n\r\nimport NotesList from \"./NotesList\";\r\nimport NoteRenderer from \"./NoteRenderer\";\r\n\r\nimport usePersistantState from \"./usePersistentState\";\r\n\r\nlet initialNotes = [{\r\n  id: Date.now(),\r\n  name: \"Noter Introduction\",\r\n  text: `## Noter\r\n\r\n![notebook](https://cdn.dribbble.com/users/119233/screenshots/7022501/media/fa17c4799bdbccb6dbbf7e313a678a62.jpg)  \r\n<small>Image from Unsplash</small>\r\n\r\nThe best note-taking app, probably ever.\r\n\r\n___\r\n\r\n## Features\r\n\r\n1. Markdown note-taking\r\n - Easier and more classy notes with markdown\r\n2. Add and delete notes\r\n - You can add as many notes as you want\r\n1. Persistent storage\r\n - You won't lose your notes, not under my watch\r\n1. Being the **best** note-taking app ever\r\n - I don't _need_ to explain myself\r\n\r\n ## Usage\r\n\r\n- Use the \"+\" button on the left sidebar to add a new note\r\n- Start typing markdown code into the left panel. You can see the results on the right panel\r\n- You can delete notes by hovering on a note on the left sidebar and clicking the \"x\" button\r\n___\r\n\r\nHere's a random Javascript code for no particular reason:\r\n\\`\\`\\`javascript\r\nfunction sumOfDigits(num)\r\n{\r\n  let sum = 0;\r\n\r\n  num = Math.abs(num);\r\n  while(num != 0)\r\n  {\r\n    sum += num % 10; // Add last digit to the sum\r\n    num = Math.floor(num / 10); // Remove the last digit\r\n  }\r\n\r\n  return sum;\r\n}\r\n\\`\\`\\``\r\n}];\r\n\r\nfunction App() \r\n{\r\n  let [notes, setNotes] = usePersistantState(\"notes\", initialNotes);\r\n  let [activeNoteId, setActiveNoteId] = React.useState(notes[0] ? notes[0].id : null);\r\n\r\n  let activeNote = null;\r\n  if(activeNoteId != null)\r\n  {\r\n    activeNote = notes.filter((note) => note.id == activeNoteId)[0];\r\n  }\r\n\r\n  let addNote = (id, name, text) => \r\n  {\r\n    setNotes([...notes, { id, name, text }])\r\n  };\r\n\r\n  let selectActiveNoteById = (id) => \r\n  {\r\n    setActiveNoteId(id);\r\n  };\r\n  let deleteNoteById = (id) => \r\n  {\r\n    setNotes(notes.filter(note => note.id != id));\r\n  };\r\n\r\n  let setActiveNoteText = (newText) => \r\n  {\r\n    setNotes(notes.map((note) => \r\n    {\r\n      if(note.id == activeNoteId)\r\n        return { ...note, text: newText };\r\n      else\r\n        return note;\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <NotesList \r\n        notes={notes} addNote={addNote} \r\n        activeNoteId={activeNoteId}\r\n        selectActiveNoteById={selectActiveNoteById}\r\n        deleteNoteById={deleteNoteById}\r\n      />\r\n      <div className=\"note-body-container\">\r\n        {\r\n          activeNote\r\n          ?\r\n          <NoteRenderer \r\n            activeNote={activeNote}\r\n            setActiveNoteText={setActiveNoteText}\r\n          />\r\n          :\r\n          <span className=\"no-file-selected\">Please create a new note or select one</span>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}